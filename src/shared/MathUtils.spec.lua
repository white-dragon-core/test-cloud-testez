-- Tests for MathUtils module
return function()
	local MathUtils = require(script.Parent.MathUtils)

	_G.print("üß™ Starting MathUtils tests...")

	describe("MathUtils.add", function()
		it("should add two positive numbers", function()
			_G.print("Testing addition: 2 + 3")
			expect(MathUtils.add(2, 3)).to.equal(5)
		end)

		it("should fail", function()
			error("This test should fail")
		end)

		it("should add negative numbers", function()
			expect(MathUtils.add(-5, -3)).to.equal(-8)
		end)

		it("should add zero", function()
			expect(MathUtils.add(5, 0)).to.equal(5)
		end)
	end)

	describe("MathUtils.subtract", function()
		it("should subtract two numbers", function()
			expect(MathUtils.subtract(10, 3)).to.equal(7)
		end)

		it("should handle negative results", function()
			expect(MathUtils.subtract(3, 10)).to.equal(-7)
		end)
	end)

	describe("MathUtils.multiply", function()
		it("should multiply two numbers", function()
			expect(MathUtils.multiply(4, 5)).to.equal(20)
		end)

		it("should handle multiplication by zero", function()
			expect(MathUtils.multiply(100, 0)).to.equal(0)
		end)

		it("should handle negative numbers", function()
			expect(MathUtils.multiply(-3, 4)).to.equal(-12)
		end)
	end)

	describe("MathUtils.divide", function()
		it("should divide two numbers", function()
			expect(MathUtils.divide(20, 4)).to.equal(5)
		end)

		it("should throw error on division by zero", function()
			_G.warn("‚ö†Ô∏è Testing division by zero - should throw error")
			expect(function()
				MathUtils.divide(10, 0)
			end).to.throw()
		end)
	end)

	describe("MathUtils.isEven", function()
		it("should return true for even numbers", function()
			expect(MathUtils.isEven(2)).to.equal(true)
			expect(MathUtils.isEven(4)).to.equal(true)
			expect(MathUtils.isEven(0)).to.equal(true)
		end)

		it("should return false for odd numbers", function()
			expect(MathUtils.isEven(1)).to.equal(false)
			expect(MathUtils.isEven(3)).to.equal(false)
			expect(MathUtils.isEven(5)).to.equal(false)
		end)
	end)

	describe("MathUtils.isPrime", function()
		it("should return true for prime numbers", function()
			expect(MathUtils.isPrime(2)).to.equal(true)
			expect(MathUtils.isPrime(3)).to.equal(true)
			expect(MathUtils.isPrime(5)).to.equal(true)
			expect(MathUtils.isPrime(7)).to.equal(true)
			expect(MathUtils.isPrime(11)).to.equal(true)
		end)

		it("should return false for non-prime numbers", function()
			expect(MathUtils.isPrime(1)).to.equal(false)
			expect(MathUtils.isPrime(4)).to.equal(false)
			expect(MathUtils.isPrime(6)).to.equal(false)
			expect(MathUtils.isPrime(8)).to.equal(false)
			expect(MathUtils.isPrime(9)).to.equal(false)
		end)

		it("should return false for negative numbers", function()
			expect(MathUtils.isPrime(-5)).to.equal(false)
		end)
	end)

	describe("MathUtils.factorial", function()
		it("should calculate factorial correctly", function()
			expect(MathUtils.factorial(0)).to.equal(1)
			expect(MathUtils.factorial(1)).to.equal(1)
			expect(MathUtils.factorial(5)).to.equal(120)
			expect(MathUtils.factorial(6)).to.equal(720)
		end)

		it("should throw error for negative numbers", function()
			expect(function()
				MathUtils.factorial(-1)
			end).to.throw()
		end)
	end)
end
